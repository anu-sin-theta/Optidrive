{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///media/dark/Baby_Shark/Anufied/WebstormProjects/Optidrive/optidrive/src/pages/FileExplorer.js"],"sourcesContent":["// file-explorer/server.js\nconst express = require('express');\nconst cors = require('cors');\nconst multer = require('multer');\nconst fs = require('fs');\nconst path = require('path');\n\nconst app = express();\nconst PORT = 5676; // Define the port\nconst HOME_DIR = path.join(__dirname, 'data');\n\n// Set up multer for file uploads\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    const destinationPath = req.query.path ? path.join(HOME_DIR, req.query.path) : HOME_DIR;\n    console.log('Upload destination:', destinationPath); // Log the destination path\n    cb(null, destinationPath);\n  },\n  filename: (req, file, cb) => {\n    cb(null, file.originalname);\n  }\n});\n\nconst upload = multer({ storage: storage });\n\napp.use(cors());\napp.use(express.json());\napp.use(express.static(path.join(__dirname))); // Serve static files\n\n// Middleware to set the current directory\napp.use((req, res, next) => {\n  req.currentDir = req.query.path ? path.join(HOME_DIR, req.query.path) : HOME_DIR;\n  console.log('Current directory:', req.currentDir); // Log the current directory\n  next();\n});\n\n// List files and directories\napp.get('/list', (req, res) => {\n  fs.readdir(req.currentDir, (err, files) => {\n    if (err) {\n      console.error('Error listing files:', err);\n      return res.status(500).send(err);\n    }\n    res.json(files);\n  });\n});\n\n// Create a new directory\napp.post('/mkdir', (req, res) => {\n  const { name } = req.body;\n  const folderPath = path.join(req.currentDir, name);\n\n  if (fs.existsSync(folderPath)) {\n    res.status(400).json({ message: 'Folder already exists' });\n  } else {\n    fs.mkdirSync(folderPath);\n    res.json({ message: 'Folder created successfully' });\n  }\n});\n\n// Upload a file\napp.post('/upload', upload.single('file'), (req, res) => {\n  if (req.file) {\n    res.send('File uploaded');\n  } else {\n    res.status(500).send('File upload failed');\n  }\n});\n\n// Delete a file or directory\napp.delete('/delete', (req, res) => {\n  const filePath = path.join(req.currentDir, req.query.name);\n  fs.stat(filePath, (err, stats) => {\n    if (err) {\n      console.error('Error deleting file:', err);\n      return res.status(500).send(err);\n    }\n    if (stats.isDirectory()) {\n      fs.rmdir(filePath, { recursive: true }, (err) => {\n        if (err) {\n          console.error('Error deleting directory:', err);\n          return res.status(500).send(err);\n        }\n        res.send('Directory deleted');\n      });\n    } else {\n      fs.unlink(filePath, (err) => {\n        if (err) {\n          console.error('Error deleting file:', err);\n          return res.status(500).send(err);\n        }\n        res.send('File deleted');\n      });\n    }\n  });\n});\n\n// Rename a file or directory\napp.post('/rename', (req, res) => {\n  const oldName = req.body.oldName;\n  const newName = req.body.newName;\n  const oldPath = path.join(req.currentDir, oldName);\n  const newPath = path.join(req.currentDir, newName);\n  fs.rename(oldPath, newPath, (err) => {\n    if (err) {\n      console.error('Error renaming file:', err);\n      return res.status(500).send(err);\n    }\n    res.send('Renamed');\n  });\n});\n\n// Preview a file\napp.get('/preview', (req, res) => {\n  const filePath = path.join(req.currentDir, req.query.name);\n  fs.readFile(filePath, (err, data) => {\n    if (err) {\n      console.error('Error previewing file:', err);\n      return res.status(500).send(err);\n    }\n    res.send(data);\n  });\n});\n\n// Download a file\napp.get('/download', (req, res) => {\n  const filePath = path.join(req.currentDir, req.query.name);\n  res.download(filePath, (err) => {\n    if (err) {\n      console.error('Error downloading file:', err);\n      return res.status(500).send(err);\n    }\n  });\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});"],"names":[],"mappings":"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"}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}